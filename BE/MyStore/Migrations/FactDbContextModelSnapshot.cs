// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MyStore.Migrations
{
    [DbContext(typeof(FactDbContext))]
    partial class FactDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocateReceiveLaundry")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.ImportAgentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ImportAgents");
                });

            modelBuilder.Entity("Entities.InvoiceImportEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImportAgentEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImportAgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImportAgentEntityId");

                    b.HasIndex("PaymentsId");

                    b.ToTable("InvoiceImports");
                });

            modelBuilder.Entity("Entities.InvoiceLaundryDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("InvoiceLaundryEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceSellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LaundryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceLaundryEntityId");

                    b.HasIndex("LaundryId");

                    b.ToTable("InvoiceLaundryDetailsEntity");
                });

            modelBuilder.Entity("Entities.InvoiceLaundryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeFromLaundry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeToLaundry")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerEntityId");

                    b.HasIndex("PaymentsId");

                    b.ToTable("InvoiceLaundries");
                });

            modelBuilder.Entity("Entities.InvoiceSellDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("InvoiceSellEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceSellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceSewCurtainEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MerchandiseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceSellEntityId");

                    b.HasIndex("InvoiceSewCurtainEntityId");

                    b.HasIndex("MerchandiseId");

                    b.ToTable("InvoiceSellDetailsEntity");
                });

            modelBuilder.Entity("Entities.InvoiceSellEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerEntityId");

                    b.HasIndex("PaymentsId");

                    b.ToTable("InvoiceSells");
                });

            modelBuilder.Entity("Entities.InvoiceSewCurtainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeConpletedSewIng")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerEntityId");

                    b.HasIndex("PaymentsId");

                    b.ToTable("InvoiceSewCurtains");
                });

            modelBuilder.Entity("Entities.LaundryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Laundries");
                });

            modelBuilder.Entity("Entities.MerchandiseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InvoiceImportEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceImportEntityId");

                    b.ToTable("Merchandises");
                });

            modelBuilder.Entity("Entities.PaymentDetailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PaymentDetailEntity");
                });

            modelBuilder.Entity("Entities.PaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceLaundryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPayment")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PaymentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentDetailId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Entities.PriceLaundryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LaundryEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LaundryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LaundryEntityId");

                    b.ToTable("PriceLaundryEntity");
                });

            modelBuilder.Entity("Entities.PriceMerchandiseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MerchandiseEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MerchandiseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PriceImport")
                        .HasColumnType("float");

                    b.Property<double>("PriceSell")
                        .HasColumnType("float");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MerchandiseEntityId");

                    b.ToTable("PriceMerchandiseEntity");
                });

            modelBuilder.Entity("Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PaymentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PaymentDetailId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.InvoiceImportEntity", b =>
                {
                    b.HasOne("Entities.ImportAgentEntity", null)
                        .WithMany("InvoiceImports")
                        .HasForeignKey("ImportAgentEntityId");

                    b.HasOne("Entities.PaymentEntity", "Payments")
                        .WithMany()
                        .HasForeignKey("PaymentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Entities.InvoiceLaundryDetailsEntity", b =>
                {
                    b.HasOne("Entities.InvoiceLaundryEntity", null)
                        .WithMany("InvoiceSellDetails")
                        .HasForeignKey("InvoiceLaundryEntityId");

                    b.HasOne("Entities.LaundryEntity", "Laundry")
                        .WithMany()
                        .HasForeignKey("LaundryId");

                    b.Navigation("Laundry");
                });

            modelBuilder.Entity("Entities.InvoiceLaundryEntity", b =>
                {
                    b.HasOne("Entities.CustomerEntity", null)
                        .WithMany("InvoiceLaundries")
                        .HasForeignKey("CustomerEntityId");

                    b.HasOne("Entities.PaymentEntity", "Payments")
                        .WithMany()
                        .HasForeignKey("PaymentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Entities.InvoiceSellDetailsEntity", b =>
                {
                    b.HasOne("Entities.InvoiceSellEntity", null)
                        .WithMany("InvoiceSellDetails")
                        .HasForeignKey("InvoiceSellEntityId");

                    b.HasOne("Entities.InvoiceSewCurtainEntity", null)
                        .WithMany("InvoiceSellDetails")
                        .HasForeignKey("InvoiceSewCurtainEntityId");

                    b.HasOne("Entities.MerchandiseEntity", "Merchandise")
                        .WithMany()
                        .HasForeignKey("MerchandiseId");

                    b.Navigation("Merchandise");
                });

            modelBuilder.Entity("Entities.InvoiceSellEntity", b =>
                {
                    b.HasOne("Entities.CustomerEntity", null)
                        .WithMany("InvoiceSells")
                        .HasForeignKey("CustomerEntityId");

                    b.HasOne("Entities.PaymentEntity", "Payments")
                        .WithMany()
                        .HasForeignKey("PaymentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Entities.InvoiceSewCurtainEntity", b =>
                {
                    b.HasOne("Entities.CustomerEntity", null)
                        .WithMany("InvoiceSewCurtains")
                        .HasForeignKey("CustomerEntityId");

                    b.HasOne("Entities.PaymentEntity", "Payments")
                        .WithMany()
                        .HasForeignKey("PaymentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Entities.MerchandiseEntity", b =>
                {
                    b.HasOne("Entities.InvoiceImportEntity", null)
                        .WithMany("Merchandises")
                        .HasForeignKey("InvoiceImportEntityId");
                });

            modelBuilder.Entity("Entities.PaymentEntity", b =>
                {
                    b.HasOne("Entities.PaymentDetailEntity", "PaymentDetail")
                        .WithMany()
                        .HasForeignKey("PaymentDetailId");

                    b.Navigation("PaymentDetail");
                });

            modelBuilder.Entity("Entities.PriceLaundryEntity", b =>
                {
                    b.HasOne("Entities.LaundryEntity", null)
                        .WithMany("PriceLaundries")
                        .HasForeignKey("LaundryEntityId");
                });

            modelBuilder.Entity("Entities.PriceMerchandiseEntity", b =>
                {
                    b.HasOne("Entities.MerchandiseEntity", null)
                        .WithMany("PriceMerchandises")
                        .HasForeignKey("MerchandiseEntityId");
                });

            modelBuilder.Entity("Entities.UserEntity", b =>
                {
                    b.HasOne("Entities.PaymentDetailEntity", "PaymentDetail")
                        .WithMany()
                        .HasForeignKey("PaymentDetailId");

                    b.Navigation("PaymentDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.CustomerEntity", b =>
                {
                    b.Navigation("InvoiceLaundries");

                    b.Navigation("InvoiceSells");

                    b.Navigation("InvoiceSewCurtains");
                });

            modelBuilder.Entity("Entities.ImportAgentEntity", b =>
                {
                    b.Navigation("InvoiceImports");
                });

            modelBuilder.Entity("Entities.InvoiceImportEntity", b =>
                {
                    b.Navigation("Merchandises");
                });

            modelBuilder.Entity("Entities.InvoiceLaundryEntity", b =>
                {
                    b.Navigation("InvoiceSellDetails");
                });

            modelBuilder.Entity("Entities.InvoiceSellEntity", b =>
                {
                    b.Navigation("InvoiceSellDetails");
                });

            modelBuilder.Entity("Entities.InvoiceSewCurtainEntity", b =>
                {
                    b.Navigation("InvoiceSellDetails");
                });

            modelBuilder.Entity("Entities.LaundryEntity", b =>
                {
                    b.Navigation("PriceLaundries");
                });

            modelBuilder.Entity("Entities.MerchandiseEntity", b =>
                {
                    b.Navigation("PriceMerchandises");
                });
#pragma warning restore 612, 618
        }
    }
}
