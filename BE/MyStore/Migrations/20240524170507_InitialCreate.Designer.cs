// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MyStore.Migrations
{
    [DbContext(typeof(FactDbContext))]
    [Migration("20240524170507_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocateReceiveLaundry")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.ImportAgentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ImportAgents");
                });

            modelBuilder.Entity("Entities.InvoiceImportDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<Guid>("InvoiceImportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("MerchandiseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MerchandiseName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<double?>("PriceImport")
                        .HasColumnType("float");

                    b.Property<double?>("PriceSell")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceImportId");

                    b.HasIndex("MerchandiseId");

                    b.ToTable("InvoiceImportDetail", (string)null);
                });

            modelBuilder.Entity("Entities.InvoiceImportEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<Guid?>("ImportAgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ValueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 24, 17, 5, 7, 731, DateTimeKind.Utc).AddTicks(8974));

                    b.HasKey("Id");

                    b.HasIndex("ImportAgentId");

                    b.ToTable("InvoiceImport", (string)null);
                });

            modelBuilder.Entity("Entities.InvoiceLaundryDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<Guid>("InvoiceLaundryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("LaundryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<double?>("PriceForOne")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceLaundryId");

                    b.HasIndex("LaundryId");

                    b.ToTable("InvoiceLaundryDetail", (string)null);
                });

            modelBuilder.Entity("Entities.InvoiceLaundryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeFromLaundry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeToLaundry")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("InvoiceLaundries");
                });

            modelBuilder.Entity("Entities.InvoiceSellDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<Guid?>("InvoiceSellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("MerchandiseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MerchandiseName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<double?>("PriceImport")
                        .HasColumnType("float");

                    b.Property<double?>("PriceSell")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceSellId");

                    b.HasIndex("MerchandiseId");

                    b.ToTable("InvoiceSellDetail", (string)null);
                });

            modelBuilder.Entity("Entities.InvoiceSellEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("InvoiceName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ValueDate")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 24, 17, 5, 7, 731, DateTimeKind.Utc).AddTicks(6642));

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("InvoiceSell", (string)null);
                });

            modelBuilder.Entity("Entities.InvoiceSewCurtainDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<Guid>("InvoiceSewCurtainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<double?>("PriceForOne")
                        .HasColumnType("float");

                    b.Property<Guid?>("SewCurtainId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceSewCurtainId");

                    b.HasIndex("SewCurtainId");

                    b.ToTable("InvoiceSewCurtainDetails", (string)null);
                });

            modelBuilder.Entity("Entities.InvoiceSewCurtainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<string>("InvoiceName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("TimeConpletedSewIng")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeEnd")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeFrom")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 24, 17, 5, 7, 732, DateTimeKind.Utc).AddTicks(1140));

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("InvoiceLaundry", (string)null);
                });

            modelBuilder.Entity("Entities.LaundryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Laundry", (string)null);
                });

            modelBuilder.Entity("Entities.MerchandiseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.ToTable("Merchandise", (string)null);
                });

            modelBuilder.Entity("Entities.PaymentDetailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 24, 17, 5, 7, 732, DateTimeKind.Utc).AddTicks(3258));

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("Nvarchar");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PaymentDetail", (string)null);
                });

            modelBuilder.Entity("Entities.PaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<Guid?>("InvoiceImportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceLaundryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceSellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceSewCurtainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("InvoiceImportId")
                        .IsUnique()
                        .HasFilter("[InvoiceImportId] IS NOT NULL");

                    b.HasIndex("InvoiceLaundryId")
                        .IsUnique()
                        .HasFilter("[InvoiceLaundryId] IS NOT NULL");

                    b.HasIndex("InvoiceSellId")
                        .IsUnique()
                        .HasFilter("[InvoiceSellId] IS NOT NULL");

                    b.HasIndex("InvoiceSewCurtainId")
                        .IsUnique()
                        .HasFilter("[InvoiceSewCurtainId] IS NOT NULL");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("Entities.PriceLaundryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("LaundryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("ValueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 24, 17, 5, 7, 732, DateTimeKind.Utc).AddTicks(4286));

                    b.HasKey("Id");

                    b.HasIndex("LaundryId");

                    b.ToTable("PiceLaundry", (string)null);
                });

            modelBuilder.Entity("Entities.PriceMerchandiseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MerchandiseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PriceImport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("PriceSell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("ValueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 24, 17, 5, 7, 732, DateTimeKind.Utc).AddTicks(5358));

                    b.HasKey("Id");

                    b.HasIndex("MerchandiseId");

                    b.ToTable("PiceMerchandise", (string)null);
                });

            modelBuilder.Entity("Entities.PriceSewCurtainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("PriceImport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("PriceSell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<Guid>("SewCurtainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 24, 17, 5, 7, 732, DateTimeKind.Utc).AddTicks(6536));

                    b.HasKey("Id");

                    b.HasIndex("SewCurtainId");

                    b.ToTable("PriceSewCurtain", (string)null);
                });

            modelBuilder.Entity("Entities.SewCurtainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.ToTable("SewCurtain", (string)null);
                });

            modelBuilder.Entity("Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.InvoiceImportDetailsEntity", b =>
                {
                    b.HasOne("Entities.InvoiceImportEntity", "InvoiceImport")
                        .WithMany("InvoiceImportDetails")
                        .HasForeignKey("InvoiceImportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.MerchandiseEntity", "Merchandise")
                        .WithMany("InvoiceImportDetails")
                        .HasForeignKey("MerchandiseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceImport");

                    b.Navigation("Merchandise");
                });

            modelBuilder.Entity("Entities.InvoiceImportEntity", b =>
                {
                    b.HasOne("Entities.ImportAgentEntity", "ImportAgent")
                        .WithMany("InvoiceImports")
                        .HasForeignKey("ImportAgentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ImportAgent");
                });

            modelBuilder.Entity("Entities.InvoiceLaundryDetailsEntity", b =>
                {
                    b.HasOne("Entities.InvoiceLaundryEntity", "InvoiceLaundry")
                        .WithMany("InvoiceLaundryDetails")
                        .HasForeignKey("InvoiceLaundryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.LaundryEntity", "Laundry")
                        .WithMany("InvoiceLaundryDetails")
                        .HasForeignKey("LaundryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceLaundry");

                    b.Navigation("Laundry");
                });

            modelBuilder.Entity("Entities.InvoiceLaundryEntity", b =>
                {
                    b.HasOne("Entities.CustomerEntity", "Customer")
                        .WithMany("InvoiceLaundries")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.InvoiceSellDetailsEntity", b =>
                {
                    b.HasOne("Entities.InvoiceSellEntity", "InvoiceSell")
                        .WithMany("InvoiceSellDetails")
                        .HasForeignKey("InvoiceSellId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.MerchandiseEntity", "Merchandise")
                        .WithMany("InvoiceSellDetails")
                        .HasForeignKey("MerchandiseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceSell");

                    b.Navigation("Merchandise");
                });

            modelBuilder.Entity("Entities.InvoiceSellEntity", b =>
                {
                    b.HasOne("Entities.CustomerEntity", "Customer")
                        .WithMany("InvoiceSells")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.InvoiceSewCurtainDetailsEntity", b =>
                {
                    b.HasOne("Entities.InvoiceSewCurtainEntity", "InvoiceSewCurtain")
                        .WithMany("InvoiceSewCurtainDetails")
                        .HasForeignKey("InvoiceSewCurtainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.SewCurtainEntity", "SewCurtain")
                        .WithMany("InvoiceSewCurtains")
                        .HasForeignKey("SewCurtainId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceSewCurtain");

                    b.Navigation("SewCurtain");
                });

            modelBuilder.Entity("Entities.InvoiceSewCurtainEntity", b =>
                {
                    b.HasOne("Entities.CustomerEntity", "Customer")
                        .WithMany("InvoiceSewCurtains")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.PaymentDetailEntity", b =>
                {
                    b.HasOne("Entities.PaymentEntity", "Payment")
                        .WithOne("PaymentDetail")
                        .HasForeignKey("Entities.PaymentDetailEntity", "PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.UserEntity", "User")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.PaymentEntity", b =>
                {
                    b.HasOne("Entities.InvoiceImportEntity", "InvoiceImport")
                        .WithOne("Payment")
                        .HasForeignKey("Entities.PaymentEntity", "InvoiceImportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.InvoiceLaundryEntity", "InvoiceLaundry")
                        .WithOne("Payment")
                        .HasForeignKey("Entities.PaymentEntity", "InvoiceLaundryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.InvoiceSellEntity", "InvoiceSell")
                        .WithOne("Payment")
                        .HasForeignKey("Entities.PaymentEntity", "InvoiceSellId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.InvoiceSewCurtainEntity", "InvoiceSewCurtain")
                        .WithOne("Payment")
                        .HasForeignKey("Entities.PaymentEntity", "InvoiceSewCurtainId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceImport");

                    b.Navigation("InvoiceLaundry");

                    b.Navigation("InvoiceSell");

                    b.Navigation("InvoiceSewCurtain");
                });

            modelBuilder.Entity("Entities.PriceLaundryEntity", b =>
                {
                    b.HasOne("Entities.LaundryEntity", "Laundry")
                        .WithMany("PriceLaundries")
                        .HasForeignKey("LaundryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Laundry");
                });

            modelBuilder.Entity("Entities.PriceMerchandiseEntity", b =>
                {
                    b.HasOne("Entities.MerchandiseEntity", "Merchandise")
                        .WithMany("PriceMerchandises")
                        .HasForeignKey("MerchandiseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Merchandise");
                });

            modelBuilder.Entity("Entities.PriceSewCurtainEntity", b =>
                {
                    b.HasOne("Entities.SewCurtainEntity", "SewCurtain")
                        .WithMany("PriceSewCurtains")
                        .HasForeignKey("SewCurtainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SewCurtain");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.CustomerEntity", b =>
                {
                    b.Navigation("InvoiceLaundries");

                    b.Navigation("InvoiceSells");

                    b.Navigation("InvoiceSewCurtains");
                });

            modelBuilder.Entity("Entities.ImportAgentEntity", b =>
                {
                    b.Navigation("InvoiceImports");
                });

            modelBuilder.Entity("Entities.InvoiceImportEntity", b =>
                {
                    b.Navigation("InvoiceImportDetails");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.InvoiceLaundryEntity", b =>
                {
                    b.Navigation("InvoiceLaundryDetails");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.InvoiceSellEntity", b =>
                {
                    b.Navigation("InvoiceSellDetails");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.InvoiceSewCurtainEntity", b =>
                {
                    b.Navigation("InvoiceSewCurtainDetails");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.LaundryEntity", b =>
                {
                    b.Navigation("InvoiceLaundryDetails");

                    b.Navigation("PriceLaundries");
                });

            modelBuilder.Entity("Entities.MerchandiseEntity", b =>
                {
                    b.Navigation("InvoiceImportDetails");

                    b.Navigation("InvoiceSellDetails");

                    b.Navigation("PriceMerchandises");
                });

            modelBuilder.Entity("Entities.PaymentEntity", b =>
                {
                    b.Navigation("PaymentDetail");
                });

            modelBuilder.Entity("Entities.SewCurtainEntity", b =>
                {
                    b.Navigation("InvoiceSewCurtains");

                    b.Navigation("PriceSewCurtains");
                });

            modelBuilder.Entity("Entities.UserEntity", b =>
                {
                    b.Navigation("PaymentDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
